// I intend to implement a neat ~blogging system,
// with a few specific goals:

// drag, crop, resize, etc.
// drag-and-drop image/movie insertion

// the main p0st dynamic is to drag an image
// then comment on it, with possibly more images

// the main page renders (at least a header of) ~25 p0sts
// Which 25 is determined by search terms,
// or if none are entered, p0st youth.

// p0sts can be edited afterward.

// records a lot of metadata.


<!--	I need a few javascript libraries.

	jquery.js
		the most awesome js library

	tiny_mce.js
		a nice, simple rich text editor

	tweaks.js
		all my jQuery and other tweaks
		including my homebrew
		drag-and-drop event binder

	fingerframe.js
		defines a javascript object
		to be assigned to each image
		It will allow basic mouse
		interaction with the image:
			S-drag = move  the image
			A-drag = scale the image
			C-drag = crop  the image
			???    = attach a label
				 to the image
			???    = rotate the image
			...
		To accomplish these degrees of
		freedom, each image will be
		stored as $("div>img.fingerframe#fingerframe12")
		or similar.

	logger-home.js
		loads the event context of the main page:
			fingerframe mouse events disabled.
			'c'	  = initiates a p0st
			d&d image = initiates a p0st
				    with that image
				    inserted
			'p'	  = open the category
				    icon palette
			d&d icon  = initiate a p0st
				    under that category
			's'	  = open the search interface

	logger-editor.js
		loads the event context of the p0st editor:
			fingerframe mouse events enabled.
			typing	  = insert the typed text
				    (in a BG <pre> ?)
			d&d image = insert that image
				    (as a fingerframe)
			d&d icon  = add that category to
				    the current p0st
			S-Enter   = save the p0st and
				    restore the main page

	logger-search.js
		loads the event context of the search interface:
					(maybe use a lightbox/fancybox for this?)
			fingerframe mouse events disabled.
			a date slider sets the range of
				p0sts to filter out
			typing	  = add the typed text to
				    the search terms
			d&d icon  = filter p0sts from
				    that category
			filter state is automatically
				POSTED to render.php
				onchange or with a timeout
			S-Enter   = finish search
			
	render.php
		renders a set of p0sts
			$('#p0st_frame').load('render.php')
			takes the current search terms
				as an arguemnt (GET/POST)
			returns a thumbnail of all the 
				matching files
			
-->



The logger is essentially a wysiwyg html editor, with a system for searching/rendering the results.
Most of the editor's pieces were already there, and what wasn't I have coded.
The editor, now that it's compiled, can be used for many things.
Make it instance-able and put it into deb, github etc.
	(In short, canibalize it for a different project- call it traum or something.)
Code the logger using traum- it will be easy.

nicEdit is excellent, but not quite excellent enough. It uses this lame-ass
	bkLib thing instead of jQuery. I'd like to fix that...


I could perhaps just extend javascript to contain some of the methods I want (like perspective...)
	http://uselessbyte.blogspot.com/2009/12/adding-custom-javascript-bindings-to.html
	https://lists.webkit.org/pipermail/webkit-dev/2009-January/006417.html


cdf kicks ass. It's mathematica, just mark-up instead of wysiwyg
        ... except I gotta figure out how to edit one without mathematica.
	It would be excellent to incorporate CDF into the logger somehow.
